Інтерактивний тренажер з React.js
Preview
Code

import React, { useState } from 'react';

const ReactJSTutorial = () => {
  const [currentLesson, setCurrentLesson] = useState(0);
  const [codeInput, setCodeInput] = useState('');
  const [output, setOutput] = useState('');
  const [lessonComplete, setLessonComplete] = useState(false);

  const lessons = [
    {
      title: "Вступ до React: Компоненти",
      theory: `
        Компоненти - це основні будівельні блоки в React. 
        Вони дозволяють розділити інтерфейс на незалежні, повторно використовувані частини.
        
        Приклад функціонального компоненту:
        function Greeting(props) {
          return <h1>Привіт, {props.name}!</h1>;
        }
      `,
      challenge: "Створіть простий функціональний компонент, який виводить 'Вітаємо в React!'",
      expectedOutput: 'Вітаємо в React!',
      testCode: (code) => {
        try {
          // eslint-disable-next-line no-new-func
          const TestComponent = new Function('React', `return ${code}`)(React);
          const result = TestComponent({});
          return result.props.children === 'Вітаємо в React!';
        } catch (error) {
          return false;
        }
      }
    },
    {
      title: "Стани та Хуки: useState",
      theory: `
        Хук useState дозволяє додавати стан до функціональних компонентів.
        Він повертає масив з двох елементів: поточного стану та функції для його оновлення.
        
        Приклад:
        const [count, setCount] = useState(0);
        // count - поточне значення
        // setCount - функція для оновлення стану
      `,
      challenge: "Створіть компонент з лічильником, який збільшується на 1 при кліці",
      expectedOutput: 'Лічильник: 1',
      testCode: (code) => {
        try {
          // eslint-disable-next-line no-new-func
          const TestComponent = new Function('React', `return ${code}`)(React);
          const mockProps = {};
          const result = TestComponent(mockProps);
          
          // Симуляція кліку
          const setState = result.props.onClick;
          setState && setState();
          
          return result.props.children.includes('Лічильник: 1');
        } catch (error) {
          return false;
        }
      }
    },
    {
      title: "Умовний рендеринг",
      theory: `
        Умовний рендеринг дозволяє змінювати вміст компоненту залежно від стану.
        Можна використовувати оператори &&, тернарний оператор або if-else.
        
        Приклад:
        {isLoggedIn ? <UserGreeting /> : <GuestGreeting />}
      `,
      challenge: "Створіть компонент, який показує різні повідомлення залежно від стану авторизації",
      expectedOutput: 'Вітаємо, авторизований користувач!',
      testCode: (code) => {
        try {
          // eslint-disable-next-line no-new-func
          const TestComponent = new Function('React', `return ${code}`)(React);
          const mockProps = { isLoggedIn: true };
          const result = TestComponent(mockProps);
          
          return result.props.children === 'Вітаємо, авторизований користувач!';
        } catch (error) {
          return false;
        }
      }
    }
  ];

  const handleCodeSubmit = () => {
    const currentLessonData = lessons[currentLesson];
    
    try {
      const isCorrect = currentLessonData.testCode(codeInput);
      
      if (isCorrect) {
        setOutput('✅ Чудово! Код пройшов перевірку.');
        setLessonComplete(true);
      } else {
        setOutput('❌ Невірний код. Спробуйте ще раз.');
        setLessonComplete(false);
      }
    } catch (error) {
      setOutput('❌ Помилка в коді. Перевірте синтаксис.');
      setLessonComplete(false);
    }
  };

  const moveToNextLesson = () => {
    if (currentLesson < lessons.length - 1) {
      setCurrentLesson(prev => prev + 1);
      setCodeInput('');
      setOutput('');
      setLessonComplete(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold text-center mb-6">
        Інтерактивний тренажер React.js
      </h1>

      <div className="bg-white shadow-md rounded-lg p-6">
        <div className="mb-4">
          <h2 className="text-2xl font-semibold mb-2">
            {lessons[currentLesson].title}
          </h2>
          <pre className="bg-gray-50 p-4 rounded-md text-sm">
            {lessons[currentLesson].theory}
          </pre>
        </div>

        <div className="mb-4">
          <h3 className="text-xl font-medium mb-2">Завдання:</h3>
          <p className="text-gray-700">{lessons[currentLesson].challenge}</p>
        </div>

        <div className="mb-4">
          <textarea 
            rows="6"
            className="w-full p-2 border rounded-md"
            value={codeInput}
            onChange={(e) => setCodeInput(e.target.value)}
            placeholder="Введіть ваш код React компоненту"
          />
        </div>

        <div className="flex space-x-4">
          <button 
            onClick={handleCodeSubmit}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Перевірити код
          </button>

          {lessonComplete && (
            <button 
              onClick={moveToNextLesson}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              Наступний урок
            </button>
          )}
        </div>

        {output && (
          <div className={`mt-4 p-3 rounded ${
            output.includes('✅') ? 'bg-green-100' : 'bg-red-100'
          }`}>
            {output}
          </div>
        )}

        <div className="mt-6 text-center text-gray-500">
          Урок {currentLesson + 1} з {lessons.length}
        </div>
      </div>
    </div>
  );
};

export default ReactJSTutorial;